import base58 from "bs58";
import {
  FillEvent,
  PROGRAM_ID,
  getPhoenixEventsFromLogData,
  getPhoenixEventsFromTransactionData,
  isPhoenixMarketEventFill,
  logInstructionDiscriminator,
  toNum,
} from "../src/index";
import { Client } from "rpc-websockets";
import { PublicKey } from "@solana/web3.js";

// https://ellipsis-main-98a6.mainnet.rpcpool.com/801c8dae-5c95-481e-b9fb-e1216b3852e8

// const url =
//   "wss://stage.devnet.rpcpool.com/85e1e606-89fd-47a9-9a91-51ec4df1711a/whirligig";

const url =
  "wss://stage.mainnet.rpcpool.com/801c8dae-5c95-481e-b9fb-e1216b3852e8/whirligig";
const ws = new Client(url);

ws.on("open", async () => {
  // console.log(await ws.listMethods());
  const subscriptionId = await ws.call("transactionSubscribe", [
    {
      mentions: ["4DoNfFBfF7UokCC2FQzriy7yHK6DY6NVdYpuekQ5pRgg"],
      failed: false,
      vote: false,
    },
    { commitment: "processed" },
  ]);
  console.log(subscriptionId);
  console.log("Started subscription at time:", new Date());
});

const sequenceNumbers = new Set();
let prevSeq = -1;

let nonce = 0;

ws.on("transactionNotification", (data) => {
  nonce += 1;
  const txMeta = data.result.value.meta;
  // console.log(data.subscription);

  const tx = data.result.value.transaction;
  const accountKeys = [
    tx.message.accountKeys.slice(1).map((k) => base58.encode(k)),
    txMeta.loadedAddresses.writable,
    txMeta.loadedAddresses.readonly,
  ].flat();

  const signer = accountKeys[0];
  if (
    signer !== "LUKAzPV8dDbVykTVT14pCGKzFfNcgZgRbAXB8AGdKx3" &&
    signer !== "phxBcughCYKiYJxx9kYEkyqoAUL2RD3vyxSaL1gZRNG"
  ) {
    console.log(
      new Date(),
      nonce,
      base58.encode(data.result.value.signature),
      "signer:",
      accountKeys[0]
    );
  }

  for (const ix of txMeta.innerInstructions) {
    for (const innerIx of ix.instructions) {
      const program = accountKeys[innerIx.programIdIndex];
      if (program != PROGRAM_ID.toBase58()) {
        continue;
      }
      const data = base58.decode(innerIx.data);
      if (data[0] === logInstructionDiscriminator) {
        const events = getPhoenixEventsFromLogData(data.slice(1));

        if (
          events.header.market.toBase58() !==
          "4DoNfFBfF7UokCC2FQzriy7yHK6DY6NVdYpuekQ5pRgg"
        ) {
          console.log(
            new Date(),
            nonce,
            "wrong market",
            events.header.market.toBase58()
          );
          continue;
        }

        const seq = toNum(events.header.sequenceNumber);
        if (!sequenceNumbers.has(seq)) {
          sequenceNumbers.add(seq);
          if (prevSeq !== -1) {
            if (Math.abs(seq - prevSeq) !== 1) {
              console.log(
                new Date(),
                nonce,
                "sequence number gap of length:",
                seq - prevSeq,
                "seq:",
                seq,
                "prev:",
                prevSeq
              );
            }
          }
          prevSeq = seq;
        }

        const fills = events.events
          .filter((e) => isPhoenixMarketEventFill(e))
          .map((e) => {
            if (isPhoenixMarketEventFill(e)) {
              console.log(new Date(), nonce, "Found fill", e);
              const fill = e.fields[0] as FillEvent;
              return {
                orderSequenceNumber: fill.orderSequenceNumber.toString(),
                price: toNum(fill.priceInTicks),
                size: toNum(fill.baseLotsFilled),
              };
            }
          });
        if (fills.length > 0) {
          console.log(new Date(), nonce, fills);
        }
      }
    }
  }
});

console.log("done");
