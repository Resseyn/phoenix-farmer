import { Commitment, PublicKey, SYSVAR_CLOCK_PUBKEY } from "@solana/web3.js";
import { deserializeClockData, deserializeMarketData } from "../src/utils";
import { ZSTDDecoder } from "zstddec";

export const getAccountInfoZstdWithCommitment = async (
  pubkey: PublicKey,
  commitment?: Commitment
) => {
  if (!commitment) {
    commitment = "confirmed";
  }
  const body = {
    jsonrpc: "2.0",
    id: 1,
    method: "getMultipleAccounts",
    params: [
      [pubkey.toBase58(), SYSVAR_CLOCK_PUBKEY.toBase58()],
      {
        encoding: "base64+zstd",
        commitment: commitment,
      },
    ],
  };

  const response = await fetch("https://api.mainnet-beta.solana.com/", {
    method: "POST",
    body: JSON.stringify(body),
    headers: {
      "Content-Type": "application/json",
    },
  });

  const values = (await response.json()).result.value;

  console.log(values[0].data);
  console.log(values[1].data);

  const compressedMarketData = Buffer.from(values[0]?.data[0], "base64");
  const decoder = new ZSTDDecoder();
  await decoder.init();

  const compressedClockData = Buffer.from(values[1]?.data[0], "base64");
  const decompressedClockData = decoder.decode(compressedClockData);
  //   const decompressedDataChunks: Buffer[] = [];

  //   const decompressStream = new zstd.DecompressStream();
  //   const writableStream = new zstd.WriteStream();
  //   writableStream.on("data", (chunk: Buffer) => {
  //     decompressedDataChunks.push(chunk);
  //   });

  //   decompressStream.pipe(writableStream);
  //   decompressStream.end(compressedMarketData);
  //   const decompressedMarketData = Buffer.concat(decompressedDataChunks);

  // Decode the compressed buffer asynchronously
  //   const decompressedClockData = decompress(compressedClockData);
  // Use the decompressedBuffer as needed
  const clock = deserializeClockData(Buffer.from(decompressedClockData));
  console.log(clock);
  //   // Decode the compressed buffer asynchronously
  //   const decompressedMarketData = decompress(compressedMarketData);
  // Use the decompressedBuffer as needed
  //   const marketState = deserializeMarketData(
  //     Buffer.from(decompressedMarketData)
  //   );
  //   console.log(marketState);
  console.log("Decompression complete!");

  return;
};

(async function () {
  try {
    await getAccountInfoZstdWithCommitment(
      new PublicKey("4DoNfFBfF7UokCC2FQzriy7yHK6DY6NVdYpuekQ5pRgg")
    );
  } catch (err) {
    console.log("Error: ", err);
    process.exit(1);
  }

  process.exit(0);
})();
