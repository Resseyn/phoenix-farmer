/* eslint-disable @typescript-eslint/no-explicit-any */
import { Client as RpcWsClient } from "rpc-websockets";
import { Keypair, PublicKey } from "@solana/web3.js";

const WHIRLIGIG_ENDPOINT =
  "wss://stage.mainnet.rpcpool.com/801c8dae-5c95-481e-b9fb-e1216b3852e8/whirligig";

const MARKET_ACCOUNT = "4DoNfFBfF7UokCC2FQzriy7yHK6DY6NVdYpuekQ5pRgg";

export class Whirligig {
  ws: RpcWsClient;
  connected: boolean;
  private callbacks: Map<number, (data: any) => void> = new Map();

  constructor(url: string) {
    this.ws = new RpcWsClient(url);
    this.connected = false;
    this.ws.on("transactionNotification", (data: any) => {
      const subscriptionId = data.subscription;

      const callback = this.callbacks.get(subscriptionId);
      if (callback) {
        callback(subscriptionId);
      } else {
        console.log(
          "Received transaction notification for unknown ID: ",
          subscriptionId
        );
      }
    });

    console.log(new Date(), "Initialized Whirligig");
  }

  waitForAccept(): Promise<void> {
    return new Promise((resolve, reject) => {
      this.ws.on("open", () => {
        console.log(new Date(), "Websocket connected");
        this.connected = true;
        resolve();
      });
      this.ws.on("error", (err) => {
        console.error("Websocket encountered an error: ", err);
        reject(err);
      });
    });
  }

  async transactionSubscribe(
    accounts: PublicKey[],
    callback: (data: any) => void
  ): Promise<number> {
    const subId = (await this.ws.call("transactionSubscribe", [
      {
        mentions: accounts.map((a) => a.toBase58()),
        // Hack to add noise to the subscription so that we don't get a duplicate subscription ID
        exclude: [Keypair.generate().publicKey.toBase58()],
        failed: false,
        vote: false,
      },
      { commitment: "confirmed" },
    ])) as number;
    this.callbacks.set(subId, callback);
    return subId;
  }

  async transactionUnsubscribe(subscriptionId: number): Promise<void> {
    this.callbacks.delete(subscriptionId);
    await this.ws.call("transactionUnsubscribe", [subscriptionId]);
  }
}

async function main() {
  console.log("Starting whirligig...");
  const whirligig = new Whirligig(WHIRLIGIG_ENDPOINT);

  console.log("Waiting for whirligig to connect...");
  await whirligig.waitForAccept();

  console.log("Subscribing to transaction notifications...");
  const subId = await whirligig.transactionSubscribe(
    [new PublicKey(MARKET_ACCOUNT)],
    (data: any) => {
      console.log("Received transaction notification: ", data);
    }
  );

  console.log("Subscribed: ", subId);
  try {
    await whirligig.transactionUnsubscribe(subId);
    console.log("Unsubscribed: ", subId);
  } catch (e) {
    console.log("Encountered error while unsubscribing", e);
  }
}

main()
  .then(() => console.log("Done"))
  .catch((err) => console.error(err));
