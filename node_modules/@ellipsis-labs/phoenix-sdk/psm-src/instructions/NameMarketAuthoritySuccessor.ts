/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beetSolana from "@metaplex-foundation/beet-solana";
import * as beet from "@metaplex-foundation/beet";

/**
 * @category Instructions
 * @category NameMarketAuthoritySuccessor
 * @category generated
 */
export type NameMarketAuthoritySuccessorInstructionArgs = {
  successor: web3.PublicKey;
};
/**
 * @category Instructions
 * @category NameMarketAuthoritySuccessor
 * @category generated
 */
export const NameMarketAuthoritySuccessorStruct = new beet.BeetArgsStruct<
  NameMarketAuthoritySuccessorInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ["instructionDiscriminator", beet.u8],
    ["successor", beetSolana.publicKey],
  ],
  "NameMarketAuthoritySuccessorInstructionArgs"
);
/**
 * Accounts required by the _NameMarketAuthoritySuccessor_ instruction
 *
 * @property [] phoenixProgram Phoenix program
 * @property [] logAuthority Phoenix log authority
 * @property [_writable_] market This account holds the market state
 * @property [**signer**] marketAuthority The market_authority account must sign to name market successor
 * @property [**signer**] seatManagerAuthority The seat manager authority must sign to name a new market authority successor
 * @category Instructions
 * @category NameMarketAuthoritySuccessor
 * @category generated
 */
export type NameMarketAuthoritySuccessorInstructionAccounts = {
  phoenixProgram: web3.PublicKey;
  logAuthority: web3.PublicKey;
  market: web3.PublicKey;
  marketAuthority: web3.PublicKey;
  seatManagerAuthority: web3.PublicKey;
};

export const nameMarketAuthoritySuccessorInstructionDiscriminator = 9;

/**
 * Creates a _NameMarketAuthoritySuccessor_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category NameMarketAuthoritySuccessor
 * @category generated
 */
export function createNameMarketAuthoritySuccessorInstruction(
  accounts: NameMarketAuthoritySuccessorInstructionAccounts,
  args: NameMarketAuthoritySuccessorInstructionArgs,
  programId = new web3.PublicKey("PSMxQbAoDWDbvd9ezQJgARyq6R9L5kJAasaLDVcZwf1")
) {
  const [data] = NameMarketAuthoritySuccessorStruct.serialize({
    instructionDiscriminator:
      nameMarketAuthoritySuccessorInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.phoenixProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.logAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.market,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.marketAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.seatManagerAuthority,
      isWritable: false,
      isSigner: true,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
