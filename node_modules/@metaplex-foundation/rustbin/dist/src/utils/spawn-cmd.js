"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.spawnCmd = void 0;
const child_process_1 = require("child_process");
const log_1 = require("./log");
// error: could not find `anchor-cli` in registry `crates-io` with version `~0.22`
const installNotFoundRx = /could not find.+in registry/;
/** @private */
function spawnCmd(cmd, args, options = {}) {
    return new Promise((resolve, reject) => {
        var _a, _b;
        let rejected = false;
        const child = (0, child_process_1.spawn)(cmd, args, options);
        (_a = child.stdout) === null || _a === void 0 ? void 0 : _a.on('data', (buf) => {
            const msg = buf.toString();
            (0, log_1.logDebug)('spawnCmd stdout data', msg);
            (0, log_1.logDebug)('spawnCmd stdout regex', installNotFoundRx.test(msg));
            if (installNotFoundRx.test(msg)) {
                rejected = true;
                child.kill();
                reject(new Error(msg));
            }
            else {
                process.stdout.write(buf);
            }
        });
        (_b = child.stderr) === null || _b === void 0 ? void 0 : _b.on('data', (buf) => {
            const msg = buf.toString();
            (0, log_1.logDebug)('spawnCmd stderr data', msg);
            (0, log_1.logDebug)('spawnCmd stderr regex', installNotFoundRx.test(msg));
            if (installNotFoundRx.test(msg)) {
                rejected = true;
                child.kill();
                reject(new Error(msg));
            }
            else {
                process.stderr.write(buf);
            }
        });
        child
            .on('error', (err) => {
            (0, log_1.logDebug)('spawnCmd error', err);
            rejected = true;
            reject(err);
        })
            .on('exit', () => {
            (0, log_1.logDebug)('spawnCmd exit, rejected: ' + (rejected ? 'true' : 'false'));
            if (!rejected)
                resolve();
        });
    });
}
exports.spawnCmd = spawnCmd;
//# sourceMappingURL=spawn-cmd.js.map